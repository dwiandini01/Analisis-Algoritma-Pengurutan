#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
#include <random>
#include <functional>

using namespace std;
using namespace std::chrono;


vector<int> generateRandomArray(int n) {
    vector<int> arr(n);
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(1, 10000);

    generate(arr.begin(), arr.end(), bind(dis, gen));
    return arr;
}

template<typename SortFunc>
long long measureSortingTime(SortFunc sortFunc, vector<int>& arr) {
    auto start = high_resolution_clock::now();
    sortFunc(arr);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start).count();
    return duration;
}

void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; ++i) {
        for (int j = 0; j < n-i-1; ++j) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

void insertionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; ++i) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}

void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; ++i) {
        int minIdx = i;
        for (int j = i+1; j < n; ++j) {
            if (arr[j] < arr[minIdx]) {
                minIdx = j;
            }
        }
        swap(arr[i], arr[minIdx]);
    }
}

void merge(vector<int>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    
    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; ++i) {
        L[i] = arr[l + i];
    }
    for (int j = 0; j < n2; ++j) {
        R[j] = arr[m + 1 + j];
    }
    
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSortHelper(vector<int>& arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSortHelper(arr, l, m);
        mergeSortHelper(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void mergeSort(vector<int>& arr) {
    int n = arr.size();
    mergeSortHelper(arr, 0, n - 1);
}

int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j <= high - 1; ++j) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSortHelper(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSortHelper(arr, low, pi - 1);
        quickSortHelper(arr, pi + 1, high);
    }
}

void quickSort(vector<int>& arr) {
    int n = arr.size();
    quickSortHelper(arr, 0, n - 1);
}

void testSortingAlgorithms(int n) {
    vector<int> arrRandom = generateRandomArray(n);
    vector<int> arrSorted = arrRandom;
    vector<int> arrReverse = arrRandom;
    sort(arrSorted.begin(), arrSorted.end());
    sort(arrReverse.rbegin(), arrReverse.rend());
    
    vector<vector<int>> arrays = {arrRandom, arrReverse, arrSorted};
    vector<string> conditions = {"Random", "Reverse", "Sorted"};
    vector<void (*)(vector<int>&)> sortingAlgorithms = {bubbleSort, insertionSort, selectionSort, mergeSort, quickSort};
    vector<string> algorithmNames = {"Bubble Sort", "Insertion Sort", "Selection Sort", "Merge Sort", "Quick Sort"};
    
    cout << "Running time measurements for N = " << n << " elements:" << endl;
    cout << "-------------------------------------------------" << endl;
    cout << "Algorithm\t\t\t\tTime (Î¼s)" << endl;
    cout << "-------------------------------------------------" << endl;
    
    for (int i = 0; i < sortingAlgorithms.size(); ++i) {
        for (int j = 0; j < 3; ++j) {
            vector<int> arr = arrays[j];
            long long duration = measureSortingTime(sortingAlgorithms[i], arr);
            
            cout << algorithmNames[i] << "\t\t\t" << duration << endl;
        }
    }
    cout << endl;
}

int main() {
    vector<int> sizes = {10, 100, 500, 1000, 10000};
    
    for (int n : sizes) {
        testSortingAlgorithms(n);
    }
    
    return 0;
}
